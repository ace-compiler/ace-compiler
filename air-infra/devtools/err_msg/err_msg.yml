# Error message source
---
overallHeader: |
  #ifndef ERR_MSG_INC_H
  #define ERR_MSG_INC_H

  // *** DO NOT EDIT THIS FILE  ***
  //
  // This file is generated by a tool, any edit on this file will be LOST
  // whenever the file is updated by the tool
  //
varTypeEnums:
  comments: |
    // FIXED
    // Predefined
    // Used in the generated error description table (for the format statement in err msg)
    // poorman's way of meta description of number of params and their type in error msg
  def:
    wrapper: |
      enum class ERRT_DESC {
        {{code}}
      };
    enums:
      NONE: 0
      INT32: 1
      INT64: 2
      FLOAT: 3
      DOUBLE: 4
      POINTER: 5
      STRING: 6

definitions:
  comments: |
    // FIXED
    // Predefined
  code: |
    #define MAX_PARMS   5
    #define MSG_MAXSIZE 512   // 512 bytes max for any output message

errorLevels:
  def:
    wrapper: |
      enum class SEVL {
        {{code}}
      };
    enums:
      ERR: 0
      WARN: 1
      ERRFATAL: 2

userDefinedVEnums:
  comments: |
    // FIXED
    // TBG (order of the numeric in U_CODE must match that of the _MSG_User[] entires
    // and in ASCENDING ORDER
    //
  def:
    wrapper: |
      enum class U_CODE {
        // MUST be in SEQUENCE, an simple method to avoid
        // runtime searching of message handling and output
        {{code}}
      };
    # add as many as you like
    enums:
      Src_File_Open_Err: 0
      Cmplr_Assert: 1
      Uninit: 2
      GOT_Size_Conflict: 3
      Elf_Ofst64_Error: 4
      Srcfile_Not_Found: 5
      Incorrect_Option: 6
      No_Input_File: 7
      No_Output_Var: 8

structureDef: |
    typedef struct {
      U_CODE        _err_code;  // used to index into the actual fmt statement, do not reorder
      SEVL          _severity;
      const char*   _fmt;
      ERRT_DESC     _actual[MAX_PARMS];
    } MSG_DESC;

postText: |
  // end of generated material

  #endif // ERR_MSG_INC_H
