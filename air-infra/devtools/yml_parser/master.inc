// DO NOT EDIT THIS FILE
// This file is generated by a tool, any edit on this file will be LOST whenever the file is updated by the tool



#include "air/util/option.h"


struct CONFIG_NN2A : public air::util::COMMON_CONFIG {
  CONFIG_NN2A(void): _alias("off"),_analysis_enable("off"),_show(false),_trace(false),_skip_before(0) {}
  ~CONFIG_NN2A(void) {}


  std::string_view Alias(void) { return _alias ; }
  std::string_view Analysis_enable(void) { return _analysis_enable ; }
  bool Show(void) { return _show ; }
  bool Trace(void) { return _trace ; }
  int64_t Skip_before(void) { return _skip_before ; }


  std::string _alias;
  std::string _analysis_enable;
  bool _show;
  bool _trace;
  int64_t _skip_before;
};// struct CONFIG_NN2A


static CONFIG_NN2A config_nn2a;


static air::util::OPTION_DESC config_nn2a_option [] = {
  { "show", "s", "Show the progress of nn2a", &config_nn2a._show, air::util::K_NONE, 0, air::util::V_NONE },
  { "trace", "t", "Enable trace in nn2a", &config_nn2a._trace, air::util::K_NONE, 0, air::util::V_NONE },
  { "skip_before", "", "Skip item before given id", &config_nn2a._skip_before, air::util::K_INT64, 0, air::util::V_EQUAL },
};
static air::util::OPTION_DESC_HANDLE config_nn2a_option_handle =
{ sizeof(config_nn2a_option)/sizeof(config_nn2a_option[0]), config_nn2a_option };


static air::util::OPTION_DESC grp_config_nn2a_option [] = {
  { "alias", "a", "alias analysis enable", &config_nn2a._alias, air::util::K_STR, 0, air::util::V_NONE },
  { "analysis_enable", "ae", "analysis enable", &config_nn2a._analysis_enable, air::util::K_STR, 0, air::util::V_NONE },
};
static air::util::OPTION_DESC_HANDLE grp_config_nn2a_option_handle =
{ sizeof(grp_config_nn2a_option)/sizeof(grp_config_nn2a_option[0]), grp_config_nn2a_option };


static air::util::OPTION_GRP option_grp_nn2a =
{ "NN2A", "nn2a group options", ':', air::util::V_EQUAL, &grp_config_nn2a_option_handle };


static void Register_options_config_nn2a ( air::util::OPTION_MGR& option_mgr, bool standalone ) {
  option_mgr.Register_top_level_option(&config_nn2a_option_handle);
  if(standalone)
    option_mgr.Register_top_level_option(&grp_config_nn2a_option_handle);
  else
    option_mgr.Register_option_group(&option_grp_nn2a);
}


static void Update_options ( CONFIG_NN2A& config_nn2a_option ) {
  config_nn2a_option = config_nn2a;
}
