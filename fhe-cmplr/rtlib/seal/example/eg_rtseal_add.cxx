//-*-c-*-
//=============================================================================
//
// Copyright (c) XXXX-XXXX
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//=============================================================================

// This file should be auto generated by onnx2c.py,
// it's used as driver for testing ONNX.

#include <math.h>

#include "common/rtlib.h"

double Expected_data[] = {0.03751319,   -0.007840462, -0.13831607,
                          -0.030004814, 0.0056954995, 0.061941855,
                          -0.039380066, -0.019787364, 0.070967115};
int    Expected_len    = 9;

/**
 * @brief generate input data for testing ONNX
 *
 *
 * @param n
 * @param c
 * @param h
 * @param w
 * @param data, data pointer
 * @return TENSOR input data
 */
TENSOR* Generate_input_data(size_t n, size_t c, size_t h, size_t w,
                            double* data) {
  return Alloc_tensor(n, c, h, w, data);
}

/**
 * @brief validate output vector with expect vector
 *
 *
 * @param result double *
 * @param expect double *
 * @param len int
 * @return return true if value match
 */
bool Validate_output_data(double* result, double* expect, int len) {
  double error = 1e-2;
  for (int i = 0; i < len; i++) {
    if (fabs(result[i] - expect[i]) > error) {
      printf("index: %d, value: %f != %f\n", i, result[i], expect[i]);
      return false;
    }
  }
  return true;
}

int main(int argc, char* argv[]) {
  Prepare_context();

  double input1[] = {
      0.039145566523075104, 0.05556074529886246,   -0.06413869559764862,
      -0.08523835986852646, -0.025729894638061523, -0.0049942731857299805,
      -0.09473544359207153, 0.04844585806131363,   0.005355238914489746};
  TENSOR* input_data1 = Generate_input_data(1, 1, 3, 3, input1);
  printf("input");
  Print_tensor(stdout, input_data1);
  Prepare_input(input_data1, "input");
  Free_tensor(input_data1);
  double input2[] = {
      -0.0016323775053024292, -0.06340120732784271, -0.07417736947536469,
      0.05523354560136795,    0.031425394117832184, 0.06693612784147263,
      0.05535537749528885,    -0.06823322176933289, 0.06561187654733658};
  TENSOR* input_data2 = Generate_input_data(1, 1, 3, 3, input2);
  printf("onnx::Add_1");
  Print_tensor(stdout, input_data2);
  Prepare_input(input_data2, "onnx::Add_1");
  Free_tensor(input_data2);

  Run_main_graph();

  double* result = Handle_output("output");

  Finalize_context();

  bool res = Validate_output_data(result, Expected_data, Expected_len);
  free(result);
  if (res) {
    printf("SUCCESS!\n");
  } else {
    printf("FAILED!\n");
    return 1;
  }

  return 0;
}

// include fhe-cmplr generated main_graph functions.
#include "eg_rtseal_add.inc"
