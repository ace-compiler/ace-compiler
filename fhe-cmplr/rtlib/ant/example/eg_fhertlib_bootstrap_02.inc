//-*-c-*-
//=============================================================================
//
// Copyright (c) XXXX-XXXX
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//=============================================================================

// This file is auto generated by irb2c from FHE compiler,
// FHE compiler has plugined FHE operations into origin ONNX function
// and FHE operations has been lower to polynomial operation.

#include "rt_ant/rt_ant.h"

CKKS_PARAMS* Get_context_params() {
  static CKKS_PARAMS param = {LIB_ANT, 32, 0, 25, 60, 51, 0, 0};
  return &param;
}

DATA_SCHEME* Get_encode_scheme(int idx) {
  static DATA_SCHEME scheme_0 = {
    "input", {0, 0, 0, 0}, 1, {NORMAL, 0, 0, 0, 0}
  };
  static DATA_SCHEME* scheme[] = { &scheme_0 };
  return scheme[idx];
}

DATA_SCHEME* Get_decode_scheme(int idx) {
  static DATA_SCHEME scheme = {
    "output", {0, 0, 0, 0}, 1, {NORMAL, 0, 0, 0, 0}
  };
  return &scheme;
}

RT_DATA_INFO* Get_rt_data_info() {
  return NULL;
}

size_t Len             = 4;
float  Add_const_val[] = {0.25, 0.5, 0.75, 1.0};

bool Main_graph() {
  CIPHERTEXT input;
  CIPHERTEXT output;
  PLAINTEXT  onnx_add_1;
  CIPHERTEXT onnx_add_ciph;
  CIPHERTEXT bs_ciph;
  input = Get_input_data("input", 0);
  memset(&onnx_add_1, 0, sizeof(onnx_add_1));
  memset(&onnx_add_ciph, 0, sizeof(onnx_add_ciph));
  memset(&bs_ciph, 0, sizeof(bs_ciph));
  memset(&output, 0, sizeof(output));

  // encode plaintext at level 1, slots = N / 2
  Encode_plain_from_float(&onnx_add_1, Add_const_val, Len, 1, 1);
  Encrypt(&onnx_add_ciph, &onnx_add_1);
  // reset slots to half of origin slot size, slots = N / 4
  Set_slots(&onnx_add_ciph, Get_slots(&onnx_add_ciph) / 2);
  Add_ciph(&onnx_add_ciph, &onnx_add_ciph, &onnx_add_ciph);

  Bootstrap(&bs_ciph, &onnx_add_ciph, 5/*level_after_bts*/);

  Add_ciph(&output, &bs_ciph, &input);
  Set_output_data("output", 0, &output);
  return true;
}

int Get_output_count() {
  return 1;
}

int Get_input_count() {
  return 1;
}